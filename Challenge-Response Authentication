
#include <stdio.h> 
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

void E(char *in, char *out);
char * hashFunc(char * password);
char encryptedPassword[12];

int main(){
	char * username = malloc(100*sizeof(char));
	//asking for username
	printf("Please enter your username between 4 - 32 characters: ");
	scanf("%s", username);
	
	FILE * fp;
	fp = fopen("table.txt", "r+"); //opening table

	char * tableUsername = malloc(32*sizeof(char));
	char * tablePassword = malloc(12*sizeof(char));
	char * enteredPassword = malloc(100*sizeof(char));
	char * enteredHashPass = malloc(12*sizeof(char));
	char * result1 = malloc(12*sizeof(char));
	char * result2 = malloc(12*sizeof(char));
	int r;
	
	bool inTable = false;

	while(fscanf(fp, "%s %s", tableUsername, tablePassword) == 2){
	

        if(strcmp(username, tableUsername) == 0){//if username is in the table                
		inTable = true;
                printf("Please enter your password: ");
                scanf("%s", enteredPassword);

		int len = strlen(enteredPassword);
   
		   if(len < 12){
		          while(len < 12){
                            strcat(enteredPassword, "0");
                            len++;
			}
		   }

		enteredPassword[12] = '\0';

		enteredHashPass = hashFunc(enteredPassword);
		r = rand();
		
		int i;
		for(i = 0; i < strlen(enteredHashPass); i++){
			result1[i] = (char)enteredHashPass[i]^r;
		}
		result1[12] = '\0';

		for(i = 0; i < strlen(tablePassword); i++){
			result2[i] = (char)tablePassword[i]^r;
		}
		result2[12] = '\0';

		if(strcmp(result1, result2) == 0){
		printf("access granted\n");
		}

		else printf("access denied\n");
		
                }
	}
	
		if(inTable == false){
		printf("The username you entered doesn't exist, Exitting..\n");
		}
     fclose(fp);

     return 0;
    }

char * hashFunc(char * password){

    char * encryptedPassword = malloc(12*sizeof(char));
    char * b1 = malloc(5*sizeof(char));
    char * b2 = malloc(5*sizeof(char));
    char * b3 = malloc(5*sizeof(char));
    char * password2 = malloc(12*sizeof(char));

    //convert all characters of password to uppercase
    int i = 0;
    for(i; i < strlen(password); i++){
	password2[i] = toupper(password[i]);
   }
    strncpy(b1, password, 4);

    b1[4] = '\0';
    strncpy(b2, password2 + 4, 4);
    b2[4] = '\0';
    strncpy(b3, password2 + 8, 4);
    b3[4] = '\0';
    
    char * o1 = malloc(5*sizeof(char));
    char * o2 = malloc(5*sizeof(char));
    char * o3 = malloc(5*sizeof(char));

    E(b1, o1);
    E(b2, o2);
    E(b3, o3);

    strcat(encryptedPassword, o1);
    strcat(encryptedPassword, o2);
    strcat(encryptedPassword, o3);

    encryptedPassword[12] = '\0';

    return encryptedPassword;

}



void E(char *in, char *out){
    out[0]=(in[0]&0x80)^(((in[0]>>1)&0x7F)^((in[0])&0x7F));
    out[1]=((in[1]&0x80)^((in[0]<<7)&0x80))^(((in[1]>>1)&0x7F)^((in[1])&0x7F));
    out[2]=((in[2]&0x80)^((in[1]<<7)&0x80))^(((in[2]>>1)&0x7F)^((in[2])&0x7F));
    out[3]=((in[3]&0x80)^((in[2]<<7)&0x80))^(((in[3]>>1)&0x7F)^((in[3])&0x7F));
}
