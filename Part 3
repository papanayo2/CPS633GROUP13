#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

char * hash(char  * password);
void E(char *in, char *out);

int main()
{

    FILE *fp;
    fp = fopen("passwords.txt", "r+");
    if(fp == NULL)
        fp = fopen("passwords.txt", "w+");



    char  * combination = malloc(13*sizeof(char));
    memset(combination, '0', 12);
    combination[12] = '\0';

    int character = 65;

    int i, j, k, m;
    for(i = 0; i < 26; i++) {

        combination[0] = (char)(character + i);

        for(j = 0; j < 26; j++) {

            combination[1] = (char)(character + j);

            for(k = 0; k < 26; k++) {

                combination[2] = (char)(character + k);

                for(m = 0; m < 26; m++) {
                    combination[3] = (char)(character + m);
                    fprintf(fp, "%s %s\n", hash(combination), combination);
                }
            }
        }
    }
    fclose(fp);
    FILE *fp2;
    fp = fopen("passwords.txt","r+");
    fp2 = fopen("password.txt", "r");

    char * enteredHashPass = malloc(13*sizeof(char));
    fscanf(fp2, "%s", enteredHashPass);

    char * hashedTablePass = malloc(13*sizeof(char));
    char * tablePass = malloc(13*sizeof(char));


    while(fscanf(fp, "%s %s", hashedTablePass, tablePass) == 2) {
        printf("hashedtablepass= %s\n", hashedTablePass);

        printf("comparing %s with %s\n",enteredHashPass, hashedTablePass);
        if(strcmp(enteredHashPass, hashedTablePass) == 0) {
            tablePass[4] = '\0';
            printf("Result = %s", tablePass);
            break;
        }
    }

    fclose(fp2);
    fclose(fp);
    return 0;
}
char * hash(char  * password) {

    char * hashedPassword = malloc(13*sizeof(char));
    hashedPassword[0] = '\0';
    char b1[5];
    b1[4] = '\0';
    char b2[5];
    b2[4] = '\0';
    char b3[5];
    b3[4] = '\0';

    strncpy(b1, password, 4);
    strncpy(b2, password + 4, 4);
    strncpy(b3, password + 8, 4);


    char  o1[5];
    o1[4] = '\0';
    char  o2[5];
    o2[4] = '\0';
    char  o3[5];
    o3[4] = '\0';

    E(b1, o1);
    E(b2, o2);
    E(b3, o3);

    strcat(hashedPassword, o1);
    hashedPassword[4] = '\0';

    strcat(hashedPassword, o2);
    hashedPassword[8] = '\0';

    strcat(hashedPassword, o3);
    hashedPassword[12] = '\0';

    return hashedPassword;

}

void E(char *in, char *out) {
    out[0]=(in[0]&0x80)^(((in[0]>>1)&0x7F)^((in[0])&0x7F));
    out[1]=((in[1]&0x80)^((in[0]<<7)&0x80))^(((in[1]>>1)&0x7F)^((in[1])&0x7F));
    out[2]=((in[2]&0x80)^((in[1]<<7)&0x80))^(((in[2]>>1)&0x7F)^((in[2])&0x7F));
    out[3]=((in[3]&0x80)^((in[2]<<7)&0x80))^(((in[3]>>1)&0x7F)^((in[3])&0x7F));
}
