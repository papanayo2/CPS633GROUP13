#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <unistd.h>

bool isUsernameValid(char * username);
bool isPasswordValid(char * password);
char * hash(char * password);
void E(char *in, char *out);
bool passwordMatch(char * passwordInput, char * hashedPassword);
void padString(char * str);

int main() {
        /*
    While table.txt is being read everything is being copied to table2.txt to make it
    easier for us to change the password if we need to.
    */
    FILE * fp, *fp2;
    //if file exists
    if(access("table.txt", F_OK) != -1 ) {
        fp = fopen("table.txt", "r+");
    }
    else {
        fp = fopen("table.txt", "w+");
    }

    fp2 = fopen("table2.txt", "w+");

    char * username = malloc(33*sizeof(char));

    printf("Please enter your username between 4 - 32 characters: ");//prompting the user to enter his username
    scanf("%s", username);


    while(!(isUsernameValid(username))) {
        printf("Username length wrong, please enter your username again: ");
        scanf("%s", username);
    }

    char * tableUsername = malloc(32*sizeof(char));
    char * tablePassword = malloc(13*sizeof(char));
    char * enteredOldPassword = malloc(13*sizeof(char));
    char * enteredNewPassword = malloc(13*sizeof(char));


    bool inTable = false;

    while(fscanf(fp, "%s %s", tableUsername, tablePassword) == 2) {//reading the tableusername and password from the table.txt file

        fputs(tableUsername, fp2);
        fputs(" ", fp2);
        //if username is in the table
        if(strcmp(username, tableUsername) == 0) {
            inTable = true;
            int n = 0;//number of tries a user has to access his account
            printf("Please enter your old password: ");
            scanf("%s", enteredOldPassword);
            n++;

            padString(enteredOldPassword);//add characters to the entered password to make it exactly 12 characters

            while(!(passwordMatch(enteredOldPassword, tablePassword))) {

                if(n == 3) {
                    printf("Too many unsuccessful attempts - your account is locked.");
                    free(username);
                    free(enteredNewPassword);
                    free(enteredOldPassword);
                    free(tablePassword);
                    free(tableUsername);
                    exit(0);
                }
                printf("Incorrect password, please enter your old password: ");
                scanf("%s", enteredOldPassword);
                padString(enteredOldPassword);
                n++;
            }
            if(passwordMatch(enteredOldPassword, tablePassword)) {//if the passwords do match
                printf("Welcome back %s. Please enter a new password:", username);//prompt the user to change his password
                scanf("%s", enteredNewPassword);

                while(!(isPasswordValid(enteredNewPassword))) { //while new password is not valid keep asking for a valid one
                    printf("Error: Enter a valid password: ");
                    scanf("%s", enteredNewPassword);
                }

                padString(enteredNewPassword);

                printf("good job!\n");
                strcpy(tablePassword, hash(enteredNewPassword));
            }
        }

        fputs(tablePassword, fp2);//write new password to table
        fputs("\n", fp2);


    }
    //if username is not in table
    if(!(inTable)) {
        fputs(username, fp2);
        fputs(" ", fp2);
        printf("Please enter a new password. Only use lower case, upper case and numbers with a max of 12 characters with no special characters: ");
        scanf("%s", enteredNewPassword);

        padString(enteredNewPassword);

        while(!(isPasswordValid(enteredNewPassword))) { //while new password is not valid keep asking for a valid one
            printf("Error: Enter a valid password: ");
            scanf("%s", enteredNewPassword);

            padString(enteredNewPassword);
        }
        fputs(hash(enteredNewPassword), fp2);
        fputs("\n", fp2);
    }

    fclose(fp);
    remove("table.txt");
    fclose(fp2);
    rename("table2.txt", "table.txt");

    free(username);
    free(enteredNewPassword);
    free(enteredOldPassword);
    free(tablePassword);
    free(tableUsername);
    return 0;
}

bool isUsernameValid(char * username) {
    if(strlen(username) < 4  || strlen(username) > 32)
        return false;
    else return true;
}

bool isPasswordValid(char * password) {
    int i;
    for(i = 0; i < strlen(password); i++) {
        if(!(isalpha(password[i]) || isdigit(password[i])))
            return false;
    }
    return true;
}

char * hash(char  * password) {
    int i;
    for(i=0; i < strlen(password); i++){
        password[i] = toupper(password[i]);
    }
    char * hashedPassword = malloc(13*sizeof(char));
    hashedPassword[0] = '\0';
    char b1[5];
    b1[4] = '\0';
    char b2[5];
    b2[4] = '\0';
    char b3[5];
    b3[4] = '\0';
    //split the password in three four character blocks
    strncpy(b1, password, 4);
    strncpy(b2, password + 4, 4);
    strncpy(b3, password + 8, 4);


    char  o1[5];
    o1[4] = '\0';
    char  o2[5];
    o2[4] = '\0';
    char  o3[5];
    o3[4] = '\0';

    //encrypt each block
    E(b1, o1);
    E(b2, o2);
    E(b3, o3);

    //concatinate each all the blocks together
    strcat(hashedPassword, o1);
    hashedPassword[4] = '\0';

    strcat(hashedPassword, o2);
    hashedPassword[8] = '\0';

    strcat(hashedPassword, o3);
    hashedPassword[12] = '\0';

    return hashedPassword;

}

void E(char *in, char *out) {
    out[0]=(in[0]&0x80)^(((in[0]>>1)&0x7F)^((in[0])&0x7F));
    out[1]=((in[1]&0x80)^((in[0]<<7)&0x80))^(((in[1]>>1)&0x7F)^((in[1])&0x7F));
    out[2]=((in[2]&0x80)^((in[1]<<7)&0x80))^(((in[2]>>1)&0x7F)^((in[2])&0x7F));
    out[3]=((in[3]&0x80)^((in[2]<<7)&0x80))^(((in[3]>>1)&0x7F)^((in[3])&0x7F));
}

bool passwordMatch(char * passwordInput, char * hashedPassword) {

    if(strcmp(hash(passwordInput), hashedPassword) == 0 ) {
        return true;
    }
    else {
        return false;
    }

}

void padString(char * str) {

    int len = strlen(str);
    if(len < 12) {
        while(len < 12) {
            strcat(str, "0");
            len++;
        }
    }
    str[12] = '\0';
}
