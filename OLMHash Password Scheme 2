#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

bool isUsernameValid(char * username);
bool isPasswordValid(char * password);
char * hashFunc(char * password);
void E(char *in, char *out);
bool passwordMatch(char * passwordInput, char * hashedPassword);

int main(){

    char * username = malloc(100*sizeof(char));
//asking for username
    printf("Please enter your username between 4 - 32 characters: ");
	scanf("%s", username);
//if the username is invalid keep asking for username
    while(!(isUsernameValid(username))){
            printf("Username length wrong, please enter your username again: ");
            scanf("%s", username);
    }

    FILE *fp;
    fp = fopen("table.txt", "r+"); //opening table

    char * tableRow = malloc(44*sizeof(char));
    char * tableUsername = malloc(32*sizeof(char));
    char * tablePassword = malloc(12*sizeof(char));
    char * delimeter = " ";
    char * enteredOldPassword = malloc(100*sizeof(char));
    char * enteredNewPassword = malloc(100*sizeof(char));

    bool inTable = false;

    while(fgets(tableRow, 44, fp)){

        strcpy(tableUsername, strtok(tableRow, delimeter));//get the username from the tablerow
        strcpy(tablePassword, strtok(NULL, delimeter));//get the password from the tablerow
        //printf("comparing username: %s with table username: %s\n", username, tableUsername);
        if(strcmp(username, tableUsername) == 0){//if username is in the table
                inTable = true;
                printf("Please enter your old password: ");
                scanf("%s", enteredOldPassword);
                int n = 1;
                while(!(passwordMatch(enteredOldPassword, tablePassword))){
                    printf("Please enter your old password: ");
                    scanf("%s", enteredOldPassword);
                    n++;
                    if(n == 3){
                        printf("Too many unsuccessful attempts - your account is locked.");
                        break;
                    }
                }
                break;
        }
    }

    char * enteredNewPassword2 = malloc(12*sizeof(char));
    char * tableEntry = malloc(44*sizeof(char));

    if(!(inTable)){
        printf("Please enter a new password. Only use lower case, upper case and numbers with a max of 12 characters with no special characters: ");
        scanf("%s", enteredNewPassword);

        while(!(isPasswordValid(enteredNewPassword))){//while new password is not valid keep asking for a valid one
            printf("Error: Enter a valid password: ");
            scanf("%s", enteredNewPassword);
        }

        strncpy(enteredNewPassword2, enteredNewPassword, 12);//gets only the 12 first characters from the new entered password

        strcpy(tableEntry, username);
        strcat(tableEntry, " ");
        strcat(tableEntry, hashFunc(enteredNewPassword2));
        //printf("%s\n", enteredNewPassword2);
        fprintf(fp, "%s\n", tableEntry);
    }


    return 0;
}




bool isUsernameValid(char * username){
     if(strlen(username) < 4  || strlen(username) > 32) return false;
     else return true;
}

bool isPasswordValid(char * password){
    int i = 0;
    for(i; i < strlen(password); i++){
        if(!(isalpha(password[i]) || isdigit(password[i])))
            return false;
    }
    return true;
}

char * hashFunc(char * password){

    char * encryptedPassword = malloc(12*sizeof(char));
    char * b1 = malloc(4*sizeof(char));
    char * b2 = malloc(4*sizeof(char));
    char * b3 = malloc(4*sizeof(char));

    //convert all characters of password to uppercase
    strcpy(password, strupr(password));
    strncpy(b1, password, 4);
    b1[4] = '\0';
    strncpy(b2, password + 4, 4);
    b2[4] = '\0';
    strncpy(b3, password + 8, 4);
    b3[4] = '\0';

    printf("b1 is %s\n", b1);
    printf("b2 is %s\n", b2);
    printf("b3 is %s\n", b3);

    E(b1, b1);
    E(b2, b2);
    E(b3, b3);

    strcat(encryptedPassword, b1);
    strcat(encryptedPassword, b2);
    strcat(encryptedPassword, b3);

    return encryptedPassword;

}

void E(char *in, char *out){
    out[0]=(in[0]&0x80)^(((in[0]>>1)&0x7F)^((in[0])&0x7F));
    out[1]=((in[1]&0x80)^((in[0]<<7)&0x80))^(((in[1]>>1)&0x7F)^((in[1])&0x7F));
    out[2]=((in[2]&0x80)^((in[1]<<7)&0x80))^(((in[2]>>1)&0x7F)^((in[2])&0x7F));
    out[3]=((in[3]&0x80)^((in[2]<<7)&0x80))^(((in[3]>>1)&0x7F)^((in[3])&0x7F));
}

bool passwordMatch(char * passwordInput, char * hashedPassword){

    if(strcmp(hashFunc(passwordInput), hashedPassword) == 0 )
        return true;
    else return false;

}
