#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

bool isUsernameValid(char * username);
bool isPasswordValid(char * password);
char * hashFunc(char * password);
void E(char *in, char *out);
bool passwordMatch(char * passwordInput, char * hashedPassword);

int main(){
    FILE * fp;
    FILE * fp2;
    fp2 = fopen("table2.txt", "w+");

    fp = fopen("table.txt", "r+"); //opening table

    if(fp == NULL){

            fp = fopen("table.txt", "w+");

    }


    char * username = malloc(100*sizeof(char));

    printf("Please enter your username between 4 - 32 characters: ");
    scanf("%s", username);

    while(!(isUsernameValid(username))){
            printf("Username length wrong, please enter your username again: ");
            scanf("%s", username);
    }

    char * tableRow = malloc(44*sizeof(char));
    char * tableUsername = malloc(32*sizeof(char));
    char * tablePassword = malloc(12*sizeof(char));
    char * enteredOldPassword = malloc(12*sizeof(char));
    char * enteredNewPassword = malloc(12*sizeof(char));
    char * enteredNewPassword2 = malloc(12*sizeof(char));
    char * tableEntry = malloc(44*sizeof(char));

    bool inTable = false;

    while(fscanf(fp, "%s %s", tableUsername, tablePassword) == 2){
	
	fputs(tableUsername, fp2);
	fputs(" ", fp2);

		if(strcmp(username, tableUsername) == 0){
		   inTable = true;
		   printf("Please enter your old password: ");
                   scanf("%s", enteredOldPassword);
		   
		   int n = 1;
		   int len = strlen(enteredOldPassword);
   
		   if(len < 12){
		          while(len < 12){
                            strcat(enteredOldPassword, "0");
                            len++;
			}
		   }

		   enteredOldPassword[12] = '\0';
		   
		   while(!(passwordMatch(enteredOldPassword, tablePassword))){
			  
			    printf("Incorrect password, please enter your old password: ");
                            scanf("%s", enteredOldPassword);

                 	  if(n == 2){
                      	     printf("Too many unsuccessful attempts - your account is locked.");
			     exit(0);
                     	    }
                         n++;
                     }
                   if(passwordMatch(enteredOldPassword, tablePassword)){
			printf("Welcome back %s. Please enter a new password:", username);
                        scanf("%s", enteredNewPassword);
				while(!(isPasswordValid(enteredNewPassword))){//while new password is not valid keep asking for a valid one
                                     printf("Error: Enter a valid password: ");
                                     scanf("%s", enteredNewPassword);
                                  }
			    if(strlen(enteredNewPassword) < 12){
                                int len = strlen(enteredNewPassword);
                                while(len < 12){
                                   strcat(enteredNewPassword, "0");
                                     len++;
                                  }
                            }
				    enteredNewPassword[12] = '\0';
                        
                                    printf("good job!\n");
				    strcpy(tablePassword, hashFunc(enteredNewPassword));
			}
		}

	fputs(tablePassword, fp2);
	fputs("\n", fp2);

	
    }

    if(!(inTable)){
	    fputs(username, fp2);
	    fputs(" ", fp2);
            printf("Please enter a new password. Only use lower case, upper case and numbers with a max of 12 characters with no special characters: ");
            scanf("%s", enteredNewPassword);
	    int len = strlen(enteredNewPassword);

		   if(len < 12){
		          while(len < 12){
                            strcat(enteredNewPassword, "0");
                            len++;
			}
		   }

		   enteredNewPassword[12] = '\0'; 
	   
            while(!(isPasswordValid(enteredNewPassword))){//while new password is not valid keep asking for a valid one
                    printf("Error: Enter a valid password: ");
                    scanf("%s", enteredNewPassword);
		    int len = strlen(enteredNewPassword);
   
		    if(len < 12){
		          while(len < 12){
                            strcat(enteredNewPassword, "0");
                            len++;
			}
		   }

		   enteredNewPassword[12] = '\0';
            }
	   fputs(hashFunc(enteredNewPassword), fp2);
	   fputs("\n", fp2);
    }

     fclose(fp);
     remove("table.txt");
     fclose(fp2);
     rename("table2.txt", "table.txt");

     return 0;
}

bool isUsernameValid(char * username){
        if(strlen(username) < 4  || strlen(username) > 32) return false;
        else return true;
}

bool isPasswordValid(char * password){
        int i = 0;
        for(i; i < strlen(password); i++){
        if(!(isalpha(password[i]) || isdigit(password[i])))
                return false;
        }
        return true;
}

char * hashFunc(char * password){

    char * encryptedPassword = malloc(12*sizeof(char));
    char * b1 = malloc(5*sizeof(char));
    char * b2 = malloc(5*sizeof(char));
    char * b3 = malloc(5*sizeof(char));
    char * password2 = malloc(12*sizeof(char));

    //convert all characters of password to uppercase
    int i = 0;
    for(i; i < strlen(password); i++){
	password2[i] = toupper(password[i]);
   }
    strncpy(b1, password, 4);
    b1[4] = '\0';
    strncpy(b2, password2 + 4, 4);
    b2[4] = '\0';
    strncpy(b3, password2 + 8, 4);
    b3[4] = '\0';
    
    char * o1 = malloc(5*sizeof(char));
    char * o2 = malloc(5*sizeof(char));
    char * o3 = malloc(5*sizeof(char));

    E(b1, o1);
    E(b2, o2);
    E(b3, o3);

    strcat(encryptedPassword, o1);
    strcat(encryptedPassword, o2);
    strcat(encryptedPassword, o3);

    encryptedPassword[12] = '\0';

    return encryptedPassword;

}

void E(char *in, char *out){
    out[0]=(in[0]&0x80)^(((in[0]>>1)&0x7F)^((in[0])&0x7F));
    out[1]=((in[1]&0x80)^((in[0]<<7)&0x80))^(((in[1]>>1)&0x7F)^((in[1])&0x7F));
    out[2]=((in[2]&0x80)^((in[1]<<7)&0x80))^(((in[2]>>1)&0x7F)^((in[2])&0x7F));
    out[3]=((in[3]&0x80)^((in[2]<<7)&0x80))^(((in[3]>>1)&0x7F)^((in[3])&0x7F));
}

bool passwordMatch(char * passwordInput, char * hashedPassword){

    if(strcmp(hashFunc(passwordInput), hashedPassword) == 0 ){
        
        return true;
    }
    else {return false;}

}
